# -*- coding: utf-8 -*-
"""Pre-processing_for_running.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N_hMUgMmCHf4CstPQB82ZzloNuLRPuM4
"""

import numpy as np
import pandas as pd
from tkinter.filedialog import askopenfilename
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.model_selection import KFold
from sklearn.linear_model import LinearRegression
from sklearn.metrics import average_precision_score
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_log_error
from sklearn.neighbors import KNeighborsClassifier
np.random.seed(3)
def avg_age(ser):
    list_of_list = list()
    list_of_num = list()
    for a in ser:
        a = list(a)
        for i in a:
            if i == '[' or i == '-' or i == ')':
                a.remove(i)
            if '[' not in a and '-' not in a and ')' not in a:
                if len(a) == 3:
                    a[1] = a[1]+ a[2]
                    a.pop(2)
                    a[0] = int(a[0])
                    a[1] = int(a[1])
                    a[0] = int((a[0]+a[1])/2)
                    a.pop(1)
                if len(a) == 4:
                    a[0] = a[0] + a[1]
                    a[1] = a[2] + a[3]
                    a.pop(2)
                    a.pop(2)
                    a[0] = int(a[0])
                    a[1] = int(a[1])
                    a[0] = int((a[0]+a[1])/2)
                    a.pop(1)
                if len(a) == 5:
                    a[0] = a[0] + a[1]
                    a[1] = a[2] + a[3] + a[4]
                    a.pop(2)
                    a.pop(2)
                    a.pop(2)
                    a[0] = int(a[0])
                    a[1] = int(a[1])
                    a[0] = int((a[0]+a[1])/2)
                    a.pop(1)
        list_of_list.append(a)
    for ele in list_of_list:
        ele = int(ele[0])
        zero = np.zeros((6), dtype=int)
        zero[0] = ele
        list_of_num.append(zero)
    new_ser = pd.Series((list_of_num))
    return new_ser

def convert_one_hot(ser,num_parameters):
    list_of_array = list()
    if num_parameters == 4:
        for a in ser:
            one_hot = np.zeros((6), dtype=int)
            if a == 'No':
                one_hot[0] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Down':
                one_hot[1] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Steady':
                one_hot[2] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Up':
                one_hot[3] = 1
                list_of_array.append(one_hot)
                continue
    if num_parameters == 6:
        for a in ser:
            one_hot = np.zeros((6), dtype=int)
            if a == '?':
                one_hot[0] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'AfricanAmerican':
                one_hot[1] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Asian':
                one_hot[2] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Caucasian':
                one_hot[3] = 1
                list_of_array.append(one_hot)
                continue
            elif a == 'Hispanic':
                one_hot[4] = 1
                list_of_array.append(one_hot)
                continue
            else:
                one_hot[5] = 1
                list_of_array.append(one_hot)
                continue
    if num_parameters == 3:
        for a in ser:
            one_hot = np.zeros((num_parameters), dtype=int)
            if a == 'NO':
                one_hot[0] = 1
                list_of_array.append(one_hot)
                continue
            elif a == '>30':
                one_hot[1] = 1
                list_of_array.append(one_hot)
                continue
            elif a == '<30':
                one_hot[2] = 1
                list_of_array.append(one_hot)
                continue        
    new_ser = pd.Series((list_of_array))
    return new_ser

def one_hot_for_num(ser):
    list_of_array = list()
    for ele in ser:
        array = np.zeros((6),dtype=int)
        array[0] = ele
        list_of_array.append(array)
    new_ser = pd.Series((list_of_array))
    return new_ser
        

def execute(name,col_num=12):
    global raw_data
    ser = convert_one_hot(raw_data[name],4)
    raw_data = raw_data.drop(name,axis =1)
    raw_data.insert(col_num, name, ser, True)
    return raw_data[name]

def execute_num(name,col_num=12):
    global raw_data
    ser = one_hot_for_num(raw_data[name])
    raw_data = raw_data.drop(name,axis =1)
    raw_data.insert(col_num, name, ser, True)
    return raw_data[name]

def concat_one_hot_vectors(row_ser):
    list_of_vectors = list()
    for ele in row_ser:
        list_of_vectors.append(ele)
    vector = np.concatenate(list_of_vectors)
    return vector

def execute_concat_one_hot_vectors(data):
    list_of_vectors = list()
    for num in range(len(data)):
        final_vectors = concat_one_hot_vectors(data.iloc[num])
        list_of_vectors.append(final_vectors)
    return list_of_vectors
def convert_pred_to_one_and_zeros(arr):
    list_of_val = list()
    vector = np.zeros(3)
    max1 = np.argmax(arr)
    vector[max1] = 1 
    return vector

from google.colab import files
uploaded = files.upload()

import io
file = 'C:/Users/DivyanshJain/Desktop/Divyansh/Datasets/dataset_diabetes/diabetic_data.csv' #Ask user for a file
# print(str(uploaded)[2:100])
raw_data = pd.read_csv(io.BytesIO(uploaded['diabetic_data.csv']))
raw_data.head(1)

raw_data = raw_data.drop(['encounter_id','patient_nbr','payer_code',
                          'medical_specialty','weight','admission_type_id','discharge_disposition_id',
                          'admission_source_id', 'payer_code','medical_specialty','number_outpatient',
                          'number_emergency','number_inpatient','diag_1','diag_2',
                          'diag_3','max_glu_serum','A1Cresult'],axis=1)


age_ser = avg_age(raw_data['age'])
raw_data = raw_data.drop('age',axis =1)
raw_data.insert(2, "age", age_ser, True)
#print(raw_data['age'])
print(raw_data.head(10))

column_names = ['metformin','repaglinide','nateglinide','chlorpropamide',
                'glimepiride','acetohexamide','glipizide','glyburide',
                'tolbutamide','pioglitazone','rosiglitazone','acarbose',
                'miglitol','troglitazone','tolazamide','examide',
                'citoglipton','insulin','glyburide-metformin','glipizide-metformin',
                'glimepiride-pioglitazone','metformin-rosiglitazone','metformin-pioglitazone']
column_names_num = ['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_diagnoses']

for names in column_names:
    execute(names)
for names in column_names_num:
    execute_num(names)
#convert race into one hot vectors
race = convert_one_hot(raw_data['race'],6)
raw_data = raw_data.drop('race',axis =1)
raw_data.insert(0, 'race', race, True)

#convert readmitted to one hot vectors
readm = convert_one_hot(raw_data['readmitted'],3)
raw_data = raw_data.drop('readmitted',axis =1)
raw_data.insert(0, 'readmitted', readm, True)

#Binary changes in the data
change_gender = {'Female':np.array([0,0,0,0,0,0]), 'Male':np.array([0,1,0,0,0,0]), 'Unknown/Invalid':np.array([0,0,1,0,0,0])}
change_change = {'Ch':np.array([0,1,0,0,0,0]), 'No':np.array([0,0,0,0,0,0])}
change_meds = {'No':np.array([0,0,0,0,0,0]), 'Yes':np.array([0,1,0,0,0,0])}

#Implementing the changes
raw_data.gender = raw_data.gender.map(change_gender)
raw_data.change = raw_data.change.map(change_change)
raw_data.diabetesMed = raw_data.diabetesMed.map(change_meds)

data = raw_data.drop(['readmitted'],axis=1)
data = execute_concat_one_hot_vectors(data)
data = np.array(data)
print('shape:',data.shape)
print(data)

import tensorflow as tf
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Flatten, Dropout
from keras.callbacks import EarlyStopping
from keras.optimizers import RMSprop
from keras.layers import Conv1D, MaxPooling1D
from keras.optimizers import SGD
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import roc_auc_score

json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("weights4.h5")
y_pred = loaded_model.predict(data)
list_of_pred = list()
for ele in y_pred:
  vector = convert_pred_to_one_and_zeros(ele)
  if vector[0] == 1:
    list_of_pred.append('NO')
  elif vector[1] == 1:
    list_of_pred.append('>30')
  else:
    list_of_pred.append('<30')
y_pred = np.array(list_of_pred)
loaded_model.summary()
print(y_pred)

